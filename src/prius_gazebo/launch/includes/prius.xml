<?xml version="1.0"?>
<launch>

  <arg name="init_pose"/>
  <arg name="robot_name"/>

<!-- Generation of racecar and detectors: camera, lidar, zed -->
  <!-- Convert an xacro and put on parameter server -->

  <param name="robot_description" 
      command="$(find xacro)/xacro --inorder $(find prius_description)/urdf/prius.urdf robotName:=$(arg robot_name) "/>


  <!-- Spawn a robot into Gazebo -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" output="screen" args="-param robot_description -urdf $(arg init_pose) -model $(arg robot_name)  " />


  <!-- ros_control racecar launch file -->
  <include file="$(find prius_control)/launch/prius_control.launch" >
    <arg name="robot_ns" value="$(arg robot_name)" />
  </include>
  
<!-- FAKE ODOM and TF pub -->

  <!-- Allow for Gazebo to broadcast odom, publish tf from /map -> /odom--> 
  <node pkg="prius_gazebo" name="gazebo_odometry_node" type="$(arg robot_name)_gazebo_odometry_notransform.py">
    <param name="robot_ns" type="string" value="$(arg robot_name)" />
  </node>

<!-- Publish "better odom" topic that is normally generated by the particle filter 
  <node name="better_odom" pkg="topic_tools" type="relay" args="/vesc/odom /pf/pose/odom" /> 
-->

<!-- For the application in real world, odom should come from rf20 (or odometry) and imu fusing with ekf  -->  

  <!--rf2o_Laser_Olisherdometry
  <include file="$(find solabot_navigation)/launch/includes/simulator/racecar_rf2o.xml" />
-->

  <!-- ekf odom_fusion  
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" clear_params="true" >
    <rosparam command="load" file="$(find prius_gazebo)/configs/prius_ekf_params.yaml" />
  </node>
-->

</launch>
